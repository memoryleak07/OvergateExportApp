# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OvergateExportApp.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from LogRetrieve import LogRetrieve
import time
import os
import queue

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setWindowModality(QtCore.Qt.WindowModal)
        Dialog.setEnabled(True)
        Dialog.resize(445, 289)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMinimumSize(QtCore.QSize(445, 289))
        Dialog.setMaximumSize(QtCore.QSize(445, 289))
        Dialog.setToolTip("")
        Dialog.setSizeGripEnabled(False)
        self.dateEdit_FROM = QtWidgets.QDateEdit(Dialog)
        self.dateEdit_FROM.setGeometry(QtCore.QRect(20, 90, 101, 21))
        self.dateEdit_FROM.setObjectName("dateEdit_FROM")
        self.comboBox_Cassa = QtWidgets.QComboBox(Dialog)
        self.comboBox_Cassa.setGeometry(QtCore.QRect(150, 40, 111, 22))
        self.comboBox_Cassa.setObjectName("comboBox_Cassa")
        self.comboBox_Filiale = QtWidgets.QComboBox(Dialog)
        self.comboBox_Filiale.setGeometry(QtCore.QRect(20, 40, 111, 22))
        self.comboBox_Filiale.setObjectName("comboBox_Filiale")
        self.dateEdit_TO = QtWidgets.QDateEdit(Dialog)
        self.dateEdit_TO.setGeometry(QtCore.QRect(150, 90, 110, 22))
        self.dateEdit_TO.setObjectName("dateEdit_TO")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(340, 210, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.checkBox_PPOS = QtWidgets.QCheckBox(Dialog)
        self.checkBox_PPOS.setGeometry(QtCore.QRect(320, 30, 92, 23))
        self.checkBox_PPOS.setChecked(True)
        self.checkBox_PPOS.setObjectName("checkBox_PPOS")
        self.checkBox_OVG = QtWidgets.QCheckBox(Dialog)
        self.checkBox_OVG.setGeometry(QtCore.QRect(320, 60, 92, 23))
        self.checkBox_OVG.setChecked(True)
        self.checkBox_OVG.setObjectName("checkBox_OVG")
        self.checkBox_RTF = QtWidgets.QCheckBox(Dialog)
        self.checkBox_RTF.setGeometry(QtCore.QRect(320, 90, 111, 23))
        self.checkBox_RTF.setChecked(True)
        self.checkBox_RTF.setObjectName("checkBox_RTF")
        self.textEdit_OUT = QtWidgets.QTextEdit(Dialog)
        self.textEdit_OUT.setGeometry(QtCore.QRect(20, 180, 281, 91))
        self.textEdit_OUT.setObjectName("textEdit_OUT")
        self.label_Fil = QtWidgets.QLabel(Dialog)
        self.label_Fil.setGeometry(QtCore.QRect(20, 20, 67, 17))
        self.label_Fil.setObjectName("label_Fil")
        self.label_Cassa = QtWidgets.QLabel(Dialog)
        self.label_Cassa.setGeometry(QtCore.QRect(150, 20, 67, 17))
        self.label_Cassa.setObjectName("label_Cassa")
        self.label_Date = QtWidgets.QLabel(Dialog)
        self.label_Date.setGeometry(QtCore.QRect(20, 70, 241, 17))
        self.label_Date.setObjectName("label_Date")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setGeometry(QtCore.QRect(20, 140, 271, 21))
        self.progressBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setObjectName("progressBar")
        self.checkBox_Email = QtWidgets.QCheckBox(Dialog)
        self.checkBox_Email.setGeometry(QtCore.QRect(340, 160, 101, 51))
        self.checkBox_Email.setChecked(True)
        self.checkBox_Email.setObjectName("checkBox_Email")
        self.retranslateUi(Dialog)
        ### IMPOSTO LA DATA ATTUALE ALLE FORM:
        self.dateEdit_FROM.setDateTime(QtCore.QDateTime.currentDateTime())
        self.dateEdit_TO.setDateTime(QtCore.QDateTime.currentDateTime())
        # CHIAMO LA FUNZIONE PER IL RECUPERO NUMERO CASSE:
        self.comboBox_Filiale.currentIndexChanged.connect(self.recuperoInfoCasse)
        # SE PREMO IL TASTO INZIO RECUPERO
        self.pushButton.clicked.connect(self.inizioRecupero)
        
        
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "PushButton"))
        self.checkBox_PPOS.setText(_translate("Dialog", "PPOS"))
        self.checkBox_OVG.setText(_translate("Dialog", "Overgate"))
        self.checkBox_RTF.setText(_translate("Dialog", "FiscalPrinter"))
        self.label_Fil.setText(_translate("Dialog", "Filiale"))
        self.label_Cassa.setText(_translate("Dialog", "Cassa"))
        self.label_Date.setText(_translate("Dialog", "Data inizio:                Data fine:"))
        self.checkBox_Email.setText(_translate("Dialog", "Invia email"))


    def gestisciWidgedt(self, textout, pbarmin, pbarmax, pbarval, btnstate):
            ui.textEdit_OUT.setText(str(textout)) 
            self.progressBar.setMinimum(pbarmin)
            self.progressBar.setMaximum(pbarmax)
            self.progressBar.setValue(pbarval)
            self.pushButton.setEnabled(btnstate)

    def waitProgressBar(self):
        QtCore.QCoreApplication.processEvents()
        step = 0
        # self.progressBar.setMinimum(0)
        # self.progressBar.setMaximum(0)
        while step < 100:
            QtCore.QCoreApplication.processEvents()
            self.progressBar.setValue(step)
            step += 1
            time.sleep(0.001)
        else:
            QtCore.QCoreApplication.processEvents()
            step = 0
            self.progressBar.setValue(step)


    def recuperoInfoCasse(self):
        ui.comboBox_Cassa.clear()
        numfiliale = ui.comboBox_Filiale.currentText()
        ui.comboBox_Cassa.addItems(lr.recuperoNumeroCasse(numfiliale))


    def inizioRecupero(self):
        self.gestisciWidgedt("  ", 0, 100, 0, True)
        numerocassa = ui.comboBox_Cassa.currentText()
        numfiliale = ui.comboBox_Filiale.currentText()
        ip = lr.recuperoIndirizzo(numfiliale, numerocassa)
        connected = lr.connessioneCartellaCondivisa(ip)
        if not connected:
            ui.textEdit_OUT.setText("Impossibile stabilire una connessione con la cassa selezionata")
        else:
            ui.textEdit_OUT.setText("Connesso")
            self.controlloFlag()


    def controlloFlag(self):
        start = str(ui.dateEdit_FROM.date().toPyDate())
        end = str(ui.dateEdit_TO.date().toPyDate())

        self.threadList = []

        if ui.checkBox_PPOS.isChecked(): #a = lr.recuperoPPOS(dir=r"\c-drive\PPOS\run", ip="", start=start, end=end)
            self.t1 = threading.Thread(target=lr.recuperoPPOS , args=(r"\c-drive\PPOS\run", "", start, end))
            self.threadList.append(self.t1)

        if ui.checkBox_OVG.isChecked(): #b = lr.recuperoFiles(dir=r"\c-drive", ip="", name="Trace", ext="txt", start=start, end=end)
            self.t2 = threading.Thread(target=lr.recuperoFiles , args=(r"\c-drive","", "Trace", "txt",start,end))
            self.threadList.append(self.t2)

        if ui.checkBox_RTF.isChecked(): #c = lr.recuperoFiles(ir=r"\c-drive\Log\DitronRT", ip="", name="RTF", ext="log", start=start, end=end)        
            self.t3 = threading.Thread(target=lr.recuperoFiles , args=(r"\c-drive\Log\DitronRT", "", "RTF","log", start, end))
            self.threadList.append(self.t3)
        
        if not self.threadList:
            self.gestisciWidgedt("Seleziona una flag per continuare!", 0, 100, 0, True)
        else:
            self.inizioThreadCopia(self.threadList)



    def inizioThreadCopia(self, threadList):

        for thread in threadList:
            thread.start()

        while any(thread.is_alive() for thread in threadList):
            self.gestisciWidgedt("Attendi...", 0, 0, 0, False)
            self.waitProgressBar()
            time.sleep(.0001)

        if lr.controllaCartellaDestinazione():
            self.gestisciWidgedt("OK file trasferiti con successo!", 0, 100, 100, True)

            if ui.checkBox_Email.isEnabled:
                self.inviaEmail()

        else:
            self.gestisciWidgedt("Nessun file trovato!", 0, 100, 0, True)



    def inviaEmail(self):
        pass
        # import webbrowser
        # recipient = 'emailaddress'
        # subject = 'mysubject'
        # body = "weeeeeeeee"
        # body = body.replace(' ', '%20')
        # webbrowser.open('mailto:?to=' + recipient + '&subject=' + subject + '&body=' + body, new=1)

if __name__ == "__main__":

    import sys
    import threading
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    lr = LogRetrieve()
    queue = queue.Queue()

    ui.setupUi(Dialog)
    ui.comboBox_Filiale.addItems(lr.recuperoFiliali())
    # ui.pushButton.setEnabled(False)
    Dialog.show()
    sys.exit(app.exec_())
